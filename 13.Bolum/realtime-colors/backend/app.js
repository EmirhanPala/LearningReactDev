const app = require("express")();
const http = require("http").createServer(app);
const io = require("socket.io")(http);
const cors = require("cors");
/*
Bu backend socket.io ile Ã§alÄ±ÅŸÄ±yor.
NodeJS Ã¼zerinde bir modÃ¼l olan socket.io ile Ã§alÄ±ÅŸÄ±yor. Real time iÅŸlemleri yapmamÄ±za olanak(kolaylÄ±k) saÄŸlayan kÃ¼tÃ¼phane.

*/
app.use(cors());

app.get("/", (req, res) => {
	res.send("hello");
});

let lastColor = "#282c34";

io.on("connection", (socket) => { 
	/*
	connection gerÃ§ekleÅŸtiÄŸi anda bir kullanÄ±cÄ± baÄŸlandÄ±! diye bir log bÄ±rakÄ±yoruz.
	*/
	console.log("Bir kullanÄ±cÄ± baÄŸlandÄ±!");

	socket.emit("receive", lastColor);
	/*
	receive: KullanÄ±cÄ± ilk olarak backend'e baÄŸlandÄ±ÄŸÄ± anda client tarafÄ±ndan son renk neyse onu iletiyor ve o renk ekranda gÃ¶steriliyor.
	*/


	/*
	Her hangi bir clientten backende bir butona basÄ±ldÄ±ÄŸÄ± anda renk kodu iletildiÄŸi anda onu karÅŸÄ±ladÄ±k.

	newColor kanalÄ±ndan yeni bir renk geldiÄŸi anda her hangi bir renk gelmiÅŸ (color) sonrada onu logladÄ±k.
	*/
	socket.on("newColor", (color) => {
		console.log(color);

		lastColor = color;

		/*
		SonrasÄ±ndada diÄŸer baÄŸlÄ± olan tÃ¼m clientlara bunu iletmiÅŸiz.
		*/
		io.emit("receive", color);
	});

	socket.on("disconnect", () => {
		console.log("Bir kullanÄ±cÄ± ayrÄ±ldÄ±.");
	});
});

http.listen(3001, () => console.log("Server is up ğŸš€ ğŸš€"));
